Compare the performance of Strassen method of matrix multiplication with traditional way of matrix multiplication.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Memory allocation for matrix
int** allocateMatrix(int size) {
    int** matrix = malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++)
        matrix[i] = malloc(size * sizeof(int));
    return matrix;
}

// Free allocated matrix memory
void freeMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++)
        free(matrix[i]);
    free(matrix);
}

// Traditional matrix multiplication
void traditionalMultiply(int** A, int** B, int** C, int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++)
                C[i][j] += A[i][k] * B[k][j];
        }
}

// Add and subtract matrices
void add(int** A, int** B, int** C, int size) {
    for (int i = 0; i < size; i++)
        for (int j = 0; j < size; j++)
            C[i][j] = A[i][j] + B[i][j];
}

void subtract(int** A, int** B, int** C, int size) {
    for (int i = 0; i < size; i++)
        for (int j = 0; j < size; j++)
            C[i][j] = A[i][j] - B[i][j];
}

// Strassen's matrix multiplication
void strassenMultiply(int** A, int** B, int** C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = n / 2;
    int** A11 = allocateMatrix(newSize), ** A12 = allocateMatrix(newSize), ** A21 = allocateMatrix(newSize), ** A22 = allocateMatrix(newSize);
    int** B11 = allocateMatrix(newSize), ** B12 = allocateMatrix(newSize), ** B21 = allocateMatrix(newSize), ** B22 = allocateMatrix(newSize);
    int** M1 = allocateMatrix(newSize), ** M2 = allocateMatrix(newSize), ** M3 = allocateMatrix(newSize), ** M4 = allocateMatrix(newSize);
    int** M5 = allocateMatrix(newSize), ** M6 = allocateMatrix(newSize), ** M7 = allocateMatrix(newSize);
    int** tempA = allocateMatrix(newSize), ** tempB = allocateMatrix(newSize);

    for (int i = 0; i < newSize; i++)
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j]; A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j]; A22[i][j] = A[i + newSize][j + newSize];
            B11[i][j] = B[i][j]; B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j]; B22[i][j] = B[i + newSize][j + newSize];
        }

    add(A11, A22, tempA, newSize); add(B11, B22, tempB, newSize); strassenMultiply(tempA, tempB, M1, newSize);
    add(A21, A22, tempA, newSize); strassenMultiply(tempA, B11, M2, newSize);
    subtract(B12, B22, tempB, newSize); strassenMultiply(A11, tempB, M3, newSize);
    subtract(B21, B11, tempB, newSize); strassenMultiply(A22, tempB, M4, newSize);
    add(A11, A12, tempA, newSize); strassenMultiply(tempA, B22, M5, newSize);
    subtract(A21, A11, tempA, newSize); add(B11, B12, tempB, newSize); strassenMultiply(tempA, tempB, M6, newSize);
    subtract(A12, A22, tempA, newSize); add(B21, B22, tempB, newSize); strassenMultiply(tempA, tempB, M7, newSize);

    for (int i = 0; i < newSize; i++)
        for (int j = 0; j < newSize; j++) {
            C[i][j] = M1[i][j] + M4[i][j] - M5[i][j] + M7[i][j];
            C[i][j + newSize] = M3[i][j] + M5[i][j];
            C[i + newSize][j] = M2[i][j] + M4[i][j];
            C[i + newSize][j + newSize] = M1[i][j] - M2[i][j] + M3[i][j] + M6[i][j];
        }

    freeMatrix(A11, newSize); freeMatrix(A12, newSize); freeMatrix(A21, newSize); freeMatrix(A22, newSize);
    freeMatrix(B11, newSize); freeMatrix(B12, newSize); freeMatrix(B21, newSize); freeMatrix(B22, newSize);
    freeMatrix(M1, newSize); freeMatrix(M2, newSize); freeMatrix(M3, newSize); freeMatrix(M4, newSize);
    freeMatrix(M5, newSize); freeMatrix(M6, newSize); freeMatrix(M7, newSize);
    freeMatrix(tempA, newSize); freeMatrix(tempB, newSize);
}

int main() {
    int n = 4;
    int** A = allocateMatrix(n), ** B = allocateMatrix(n), ** C = allocateMatrix(n), ** D = allocateMatrix(n);

    srand(time(0));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
        }

    clock_t start = clock();
    traditionalMultiply(A, B, C, n);
    printf("Traditional Multiplication: %f seconds\n", (double)(clock() - start) / CLOCKS_PER_SEC);

    start = clock();
    strassenMultiply(A, B, D, n);
    printf("Strassen Multiplication: %f seconds\n", (double)(clock() - start) / CLOCKS_PER_SEC);

    freeMatrix(A, n); freeMatrix(B, n); freeMatrix(C, n); freeMatrix(D, n);
    return 0;
}
