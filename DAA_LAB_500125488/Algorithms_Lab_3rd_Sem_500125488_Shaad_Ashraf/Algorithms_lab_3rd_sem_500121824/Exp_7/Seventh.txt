Through 0/1 Knapsack problem, analyze the greedy and dynamic programming approach for the same dataset.
#include <stdio.h>

typedef struct { int value, weight; } Item;

// Greedy approach (approximated solution)
int greedyKnapsack(Item items[], int n, int capacity) {
    float ratio[n];
    for (int i = 0; i < n; i++) ratio[i] = (float)items[i].value / items[i].weight;

    for (int i = 0; i < n - 1; i++) // Sort by value-to-weight ratio
        for (int j = 0; j < n - i - 1; j++)
            if (ratio[j] < ratio[j + 1]) {
                Item temp = items[j]; items[j] = items[j + 1]; items[j + 1] = temp;
                float t = ratio[j]; ratio[j] = ratio[j + 1]; ratio[j + 1] = t;
            }

    int value = 0, weight = 0;
    for (int i = 0; i < n && weight < capacity; i++) {
        if (weight + items[i].weight <= capacity) {
            weight += items[i].weight; value += items[i].value;
        }
    }
    return value;
}

// Dynamic Programming approach (optimal solution)
int knapsackDP(Item items[], int n, int capacity) {
    int dp[n + 1][capacity + 1];
    for (int i = 0; i <= n; i++)
        for (int w = 0; w <= capacity; w++)
            dp[i][w] = (i == 0 || w == 0) ? 0
                         : (items[i - 1].weight <= w) 
                            ? (items[i - 1].value + dp[i - 1][w - items[i - 1].weight] > dp[i - 1][w])
                                ? items[i - 1].value + dp[i - 1][w - items[i - 1].weight]
                                : dp[i - 1][w]
                            : dp[i - 1][w];
    return dp[n][capacity];
}

int main() {
    Item items[] = {{60, 10}, {100, 20}, {120, 30}};
    int n = sizeof(items) / sizeof(items[0]), capacity = 50;

    printf("Greedy Approach: Max value = %d\n", greedyKnapsack(items, n, capacity));
    printf("DP Approach: Max value = %d\n", knapsackDP(items, n, capacity));

    return 0;
}
