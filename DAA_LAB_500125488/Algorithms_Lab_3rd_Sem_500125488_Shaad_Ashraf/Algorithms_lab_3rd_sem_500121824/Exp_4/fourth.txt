 Implement the activity selection problem to get a clear understanding of greedy approach.
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int start, end;
} Activity;

int compare(const void* a, const void* b) {
    return ((Activity*)a)->end - ((Activity*)b)->end;
}

void activitySelection(Activity activities[], int n) {
    qsort(activities, n, sizeof(Activity), compare);
    printf("Selected activities:\nActivity 1 (Start: %d, End: %d)\n", activities[0].start, activities[0].end);
    int last = 0;

    for (int i = 1; i < n; i++) {
        if (activities[i].start >= activities[last].end) {
            printf("Activity %d (Start: %d, End: %d)\n", i + 1, activities[i].start, activities[i].end);
            last = i;
        }
    }
}

int main() {
    Activity activities[] = {{1, 2}, {3, 4}, {0, 6}, {5, 7}, {8, 9}, {5, 9}};
    int n = sizeof(activities) / sizeof(activities[0]);
    activitySelection(activities, n);
    return 0;
}
